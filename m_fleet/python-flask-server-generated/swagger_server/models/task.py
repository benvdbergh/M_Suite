# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.error_detail import ErrorDetail  # noqa: F401,E501
from swagger_server.models.meta_data import MetaData  # noqa: F401,E501
from swagger_server.models.all_of_task_task_type import AllOfTaskTaskType  # noqa: F401,E501
from swagger_server.models.all_of_task_load import AllOfTaskLoad  # noqa: F401,E501
from swagger_server.models.all_of_task_status import AllOfTaskStatus  # noqa: F401,E501
from swagger_server import util


class Task(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, task_type: AllOfTaskTaskType=None, task_host_id: str=None, sequence: int=None, priority: int=None, timeout_seconds: int=None, location_station_id: str=None, device_id: str=None, angle: float=None, load: AllOfTaskLoad=None, custom_meta_data: List[MetaData]=None, task_id: str=None, mission_id: str=None, mission_host_id: str=None, status: AllOfTaskStatus=None, sub_state: str=None, state_message: str=None, device_type: str=None, start_time: str=None, end_time: str=None, errors: List[ErrorDetail]=None, load_type_id: str=None):  # noqa: E501
        """Task - a model defined in Swagger

        :param task_type: The task_type of this Task.  # noqa: E501
        :type task_type: AllOfTaskTaskType
        :param task_host_id: The task_host_id of this Task.  # noqa: E501
        :type task_host_id: str
        :param sequence: The sequence of this Task.  # noqa: E501
        :type sequence: int
        :param priority: The priority of this Task.  # noqa: E501
        :type priority: int
        :param timeout_seconds: The timeout_seconds of this Task.  # noqa: E501
        :type timeout_seconds: int
        :param location_station_id: The location_station_id of this Task.  # noqa: E501
        :type location_station_id: str
        :param device_id: The device_id of this Task.  # noqa: E501
        :type device_id: str
        :param angle: The angle of this Task.  # noqa: E501
        :type angle: float
        :param load: The load of this Task.  # noqa: E501
        :type load: AllOfTaskLoad
        :param custom_meta_data: The custom_meta_data of this Task.  # noqa: E501
        :type custom_meta_data: List[MetaData]
        :param task_id: The task_id of this Task.  # noqa: E501
        :type task_id: str
        :param mission_id: The mission_id of this Task.  # noqa: E501
        :type mission_id: str
        :param mission_host_id: The mission_host_id of this Task.  # noqa: E501
        :type mission_host_id: str
        :param status: The status of this Task.  # noqa: E501
        :type status: AllOfTaskStatus
        :param sub_state: The sub_state of this Task.  # noqa: E501
        :type sub_state: str
        :param state_message: The state_message of this Task.  # noqa: E501
        :type state_message: str
        :param device_type: The device_type of this Task.  # noqa: E501
        :type device_type: str
        :param start_time: The start_time of this Task.  # noqa: E501
        :type start_time: str
        :param end_time: The end_time of this Task.  # noqa: E501
        :type end_time: str
        :param errors: The errors of this Task.  # noqa: E501
        :type errors: List[ErrorDetail]
        :param load_type_id: The load_type_id of this Task.  # noqa: E501
        :type load_type_id: str
        """
        self.swagger_types = {
            'task_type': AllOfTaskTaskType,
            'task_host_id': str,
            'sequence': int,
            'priority': int,
            'timeout_seconds': int,
            'location_station_id': str,
            'device_id': str,
            'angle': float,
            #'load': AllOfTaskLoad,
            'load' : str,
            'custom_meta_data': List[MetaData],
            'task_id': str,
            'mission_id': str,
            'mission_host_id': str,
            'status': AllOfTaskStatus,
            'sub_state': str,
            'state_message': str,
            'device_type': str,
            'start_time': str,
            'end_time': str,
            'errors': List[ErrorDetail],
            'load_type_id': str
        }

        self.attribute_map = {
            'task_type': 'taskType',
            'task_host_id': 'taskHostId',
            'sequence': 'sequence',
            'priority': 'priority',
            'timeout_seconds': 'timeoutSeconds',
            'location_station_id': 'locationStationId',
            'device_id': 'deviceId',
            'angle': 'angle',
            'load': 'load',
            'custom_meta_data': 'customMetaData',
            'task_id': 'taskId',
            'mission_id': 'missionId',
            'mission_host_id': 'missionHostId',
            'status': 'status',
            'sub_state': 'subState',
            'state_message': 'stateMessage',
            'device_type': 'deviceType',
            'start_time': 'startTime',
            'end_time': 'endTime',
            'errors': 'errors',
            'load_type_id': 'loadTypeId'
        }
        self._task_type = task_type
        self._task_host_id = task_host_id
        self._sequence = sequence
        self._priority = priority
        self._timeout_seconds = timeout_seconds
        self._location_station_id = location_station_id
        self._device_id = device_id
        self._angle = angle
        self._load = load
        self._custom_meta_data = custom_meta_data
        self._task_id = task_id
        self._mission_id = mission_id
        self._mission_host_id = mission_host_id
        self._status = status
        self._sub_state = sub_state
        self._state_message = state_message
        self._device_type = device_type
        self._start_time = start_time
        self._end_time = end_time
        self._errors = errors
        self._load_type_id = load_type_id

    @classmethod
    def from_dict(cls, dikt) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Task of this Task.  # noqa: E501
        :rtype: Task
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_type(self) -> AllOfTaskTaskType:
        """Gets the task_type of this Task.

        The action to complete with this task  # noqa: E501

        :return: The task_type of this Task.
        :rtype: AllOfTaskTaskType
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type: AllOfTaskTaskType):
        """Sets the task_type of this Task.

        The action to complete with this task  # noqa: E501

        :param task_type: The task_type of this Task.
        :type task_type: AllOfTaskTaskType
        """
        if task_type is None:
            raise ValueError("Invalid value for `task_type`, must not be `None`")  # noqa: E501

        self._task_type = task_type

    @property
    def task_host_id(self) -> str:
        """Gets the task_host_id of this Task.

        An optional field for the client to set as its own ID to keep track of the task  # noqa: E501

        :return: The task_host_id of this Task.
        :rtype: str
        """
        return self._task_host_id

    @task_host_id.setter
    def task_host_id(self, task_host_id: str):
        """Sets the task_host_id of this Task.

        An optional field for the client to set as its own ID to keep track of the task  # noqa: E501

        :param task_host_id: The task_host_id of this Task.
        :type task_host_id: str
        """

        self._task_host_id = task_host_id

    @property
    def sequence(self) -> int:
        """Gets the sequence of this Task.

        The sequence number of the task; tasks are executed serially according to their sequence number. Or VTS will set the sequence automatically according to the order of the tasks execution in the mission request  # noqa: E501

        :return: The sequence of this Task.
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence: int):
        """Sets the sequence of this Task.

        The sequence number of the task; tasks are executed serially according to their sequence number. Or VTS will set the sequence automatically according to the order of the tasks execution in the mission request  # noqa: E501

        :param sequence: The sequence of this Task.
        :type sequence: int
        """

        self._sequence = sequence

    @property
    def priority(self) -> int:
        """Gets the priority of this Task.

        The priority of the task. If the AMR subsystem supports priorities, this will be send with the task request. If this is not set, the mission priority will be filled in to the task. If there is no mission priority, the task will be having default value. The value should be in range 0-2147483647 where 0 is the highest priority and 2147483647 is the lowest priority. This range is also configurable in the application.  # noqa: E501

        :return: The priority of this Task.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority: int):
        """Sets the priority of this Task.

        The priority of the task. If the AMR subsystem supports priorities, this will be send with the task request. If this is not set, the mission priority will be filled in to the task. If there is no mission priority, the task will be having default value. The value should be in range 0-2147483647 where 0 is the highest priority and 2147483647 is the lowest priority. This range is also configurable in the application.  # noqa: E501

        :param priority: The priority of this Task.
        :type priority: int
        """

        self._priority = priority

    @property
    def timeout_seconds(self) -> int:
        """Gets the timeout_seconds of this Task.

        The timeout for an awaitable task in seconds; if this value is less than 0, the timeout is indefinite and VTS will wait for a TaskResume request from the client to resume the Mission.  # noqa: E501

        :return: The timeout_seconds of this Task.
        :rtype: int
        """
        return self._timeout_seconds

    @timeout_seconds.setter
    def timeout_seconds(self, timeout_seconds: int):
        """Sets the timeout_seconds of this Task.

        The timeout for an awaitable task in seconds; if this value is less than 0, the timeout is indefinite and VTS will wait for a TaskResume request from the client to resume the Mission.  # noqa: E501

        :param timeout_seconds: The timeout_seconds of this Task.
        :type timeout_seconds: int
        """

        self._timeout_seconds = timeout_seconds

    @property
    def location_station_id(self) -> str:
        """Gets the location_station_id of this Task.

        The target location of where to complete the task; required for vehicle move task types  # noqa: E501

        :return: The location_station_id of this Task.
        :rtype: str
        """
        return self._location_station_id

    @location_station_id.setter
    def location_station_id(self, location_station_id: str):
        """Sets the location_station_id of this Task.

        The target location of where to complete the task; required for vehicle move task types  # noqa: E501

        :param location_station_id: The location_station_id of this Task.
        :type location_station_id: str
        """

        self._location_station_id = location_station_id

    @property
    def device_id(self) -> str:
        """Gets the device_id of this Task.

        The device which will perform the task. If not set in the request, the device will be chosen by the AMR Subsystem; If it is set, this device will be assigned to the task  # noqa: E501

        :return: The device_id of this Task.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id: str):
        """Sets the device_id of this Task.

        The device which will perform the task. If not set in the request, the device will be chosen by the AMR Subsystem; If it is set, this device will be assigned to the task  # noqa: E501

        :param device_id: The device_id of this Task.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def angle(self) -> float:
        """Gets the angle of this Task.

        the orientation of the load; applicable for wait/drop tasks based on load type. Allowed values: 0.0, 90.0, 180.0, 270.0, 360.0. Default value is 0.0 which means any work face is allowed. Also see configuration 'vts.vendor.quicktron.interface-point-pallet-workfaces' which defines work faces permitted at interface points.  # noqa: E501

        :return: The angle of this Task.
        :rtype: float
        """
        return self._angle

    @angle.setter
    def angle(self, angle: float):
        """Sets the angle of this Task.

        the orientation of the load; applicable for wait/drop tasks based on load type. Allowed values: 0.0, 90.0, 180.0, 270.0, 360.0. Default value is 0.0 which means any work face is allowed. Also see configuration 'vts.vendor.quicktron.interface-point-pallet-workfaces' which defines work faces permitted at interface points.  # noqa: E501

        :param angle: The angle of this Task.
        :type angle: float
        """

        self._angle = angle

    @property
    def load(self) -> AllOfTaskLoad:
        """Gets the load of this Task.

        The load that the task is acting on  # noqa: E501

        :return: The load of this Task.
        :rtype: AllOfTaskLoad
        """
        return self._load

    @load.setter
    def load(self, load: AllOfTaskLoad):
        """Sets the load of this Task.

        The load that the task is acting on  # noqa: E501

        :param load: The load of this Task.
        :type load: AllOfTaskLoad
        """

        self._load = load

    @property
    def custom_meta_data(self) -> List[MetaData]:
        """Gets the custom_meta_data of this Task.

        Stores a set of custom meta data that is associated to the task  # noqa: E501

        :return: The custom_meta_data of this Task.
        :rtype: List[MetaData]
        """
        return self._custom_meta_data

    @custom_meta_data.setter
    def custom_meta_data(self, custom_meta_data: List[MetaData]):
        """Sets the custom_meta_data of this Task.

        Stores a set of custom meta data that is associated to the task  # noqa: E501

        :param custom_meta_data: The custom_meta_data of this Task.
        :type custom_meta_data: List[MetaData]
        """

        self._custom_meta_data = custom_meta_data

    @property
    def task_id(self) -> str:
        """Gets the task_id of this Task.

        The unique identifier of the task set by VTS  # noqa: E501

        :return: The task_id of this Task.
        :rtype: str
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id: str):
        """Sets the task_id of this Task.

        The unique identifier of the task set by VTS  # noqa: E501

        :param task_id: The task_id of this Task.
        :type task_id: str
        """

        self._task_id = task_id

    @property
    def mission_id(self) -> str:
        """Gets the mission_id of this Task.

        The id of the mission containing the task; set by VTS  # noqa: E501

        :return: The mission_id of this Task.
        :rtype: str
        """
        return self._mission_id

    @mission_id.setter
    def mission_id(self, mission_id: str):
        """Sets the mission_id of this Task.

        The id of the mission containing the task; set by VTS  # noqa: E501

        :param mission_id: The mission_id of this Task.
        :type mission_id: str
        """

        self._mission_id = mission_id

    @property
    def mission_host_id(self) -> str:
        """Gets the mission_host_id of this Task.

        The client-side ID associated with the mission containing the task.  # noqa: E501

        :return: The mission_host_id of this Task.
        :rtype: str
        """
        return self._mission_host_id

    @mission_host_id.setter
    def mission_host_id(self, mission_host_id: str):
        """Sets the mission_host_id of this Task.

        The client-side ID associated with the mission containing the task.  # noqa: E501

        :param mission_host_id: The mission_host_id of this Task.
        :type mission_host_id: str
        """

        self._mission_host_id = mission_host_id

    @property
    def status(self) -> AllOfTaskStatus:
        """Gets the status of this Task.

        The state or status of the task  # noqa: E501

        :return: The status of this Task.
        :rtype: AllOfTaskStatus
        """
        return self._status

    @status.setter
    def status(self, status: AllOfTaskStatus):
        """Sets the status of this Task.

        The state or status of the task  # noqa: E501

        :param status: The status of this Task.
        :type status: AllOfTaskStatus
        """

        self._status = status

    @property
    def sub_state(self) -> str:
        """Gets the sub_state of this Task.

        The sub-state of the current state; this is configured in the instruction set. For details on the possible values see AMR Subsystem instruction set and documentation  # noqa: E501

        :return: The sub_state of this Task.
        :rtype: str
        """
        return self._sub_state

    @sub_state.setter
    def sub_state(self, sub_state: str):
        """Sets the sub_state of this Task.

        The sub-state of the current state; this is configured in the instruction set. For details on the possible values see AMR Subsystem instruction set and documentation  # noqa: E501

        :param sub_state: The sub_state of this Task.
        :type sub_state: str
        """

        self._sub_state = sub_state

    @property
    def state_message(self) -> str:
        """Gets the state_message of this Task.

        A message to describe the current state of the task if applicable (failed, paused)  # noqa: E501

        :return: The state_message of this Task.
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message: str):
        """Sets the state_message of this Task.

        A message to describe the current state of the task if applicable (failed, paused)  # noqa: E501

        :param state_message: The state_message of this Task.
        :type state_message: str
        """

        self._state_message = state_message

    @property
    def device_type(self) -> str:
        """Gets the device_type of this Task.

        The device type assigned to this task  # noqa: E501

        :return: The device_type of this Task.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type: str):
        """Sets the device_type of this Task.

        The device type assigned to this task  # noqa: E501

        :param device_type: The device_type of this Task.
        :type device_type: str
        """

        self._device_type = device_type

    @property
    def start_time(self) -> str:
        """Gets the start_time of this Task.

        The time the task is requested from the AMR subsystem  # noqa: E501

        :return: The start_time of this Task.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: str):
        """Sets the start_time of this Task.

        The time the task is requested from the AMR subsystem  # noqa: E501

        :param start_time: The start_time of this Task.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def end_time(self) -> str:
        """Gets the end_time of this Task.

        The time the task was marked finished  # noqa: E501

        :return: The end_time of this Task.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: str):
        """Sets the end_time of this Task.

        The time the task was marked finished  # noqa: E501

        :param end_time: The end_time of this Task.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def errors(self) -> List[ErrorDetail]:
        """Gets the errors of this Task.

        Stores any errors reported against the task  # noqa: E501

        :return: The errors of this Task.
        :rtype: List[ErrorDetail]
        """
        return self._errors

    @errors.setter
    def errors(self, errors: List[ErrorDetail]):
        """Sets the errors of this Task.

        Stores any errors reported against the task  # noqa: E501

        :param errors: The errors of this Task.
        :type errors: List[ErrorDetail]
        """

        self._errors = errors

    @property
    def load_type_id(self) -> str:
        """Gets the load_type_id of this Task.

        The ID of the type of load  # noqa: E501

        :return: The load_type_id of this Task.
        :rtype: str
        """
        return self._load_type_id

    @load_type_id.setter
    def load_type_id(self, load_type_id: str):
        """Sets the load_type_id of this Task.

        The ID of the type of load  # noqa: E501

        :param load_type_id: The load_type_id of this Task.
        :type load_type_id: str
        """

        self._load_type_id = load_type_id
