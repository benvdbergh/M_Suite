# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.fulfillment_mission import FulfillmentMission  # noqa: F401,E501
from swagger_server import util


class FulfillmentMissionsQueryResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, total: int=None, page: int=None, count: int=None, records: List[FulfillmentMission]=None):  # noqa: E501
        """FulfillmentMissionsQueryResponse - a model defined in Swagger

        :param total: The total of this FulfillmentMissionsQueryResponse.  # noqa: E501
        :type total: int
        :param page: The page of this FulfillmentMissionsQueryResponse.  # noqa: E501
        :type page: int
        :param count: The count of this FulfillmentMissionsQueryResponse.  # noqa: E501
        :type count: int
        :param records: The records of this FulfillmentMissionsQueryResponse.  # noqa: E501
        :type records: List[FulfillmentMission]
        """
        self.swagger_types = {
            'total': int,
            'page': int,
            'count': int,
            'records': List[FulfillmentMission]
        }

        self.attribute_map = {
            'total': 'total',
            'page': 'page',
            'count': 'count',
            'records': 'records'
        }
        self._total = total
        self._page = page
        self._count = count
        self._records = records

    @classmethod
    def from_dict(cls, dikt) -> 'FulfillmentMissionsQueryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FulfillmentMissionsQueryResponse of this FulfillmentMissionsQueryResponse.  # noqa: E501
        :rtype: FulfillmentMissionsQueryResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total(self) -> int:
        """Gets the total of this FulfillmentMissionsQueryResponse.


        :return: The total of this FulfillmentMissionsQueryResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: int):
        """Sets the total of this FulfillmentMissionsQueryResponse.


        :param total: The total of this FulfillmentMissionsQueryResponse.
        :type total: int
        """

        self._total = total

    @property
    def page(self) -> int:
        """Gets the page of this FulfillmentMissionsQueryResponse.


        :return: The page of this FulfillmentMissionsQueryResponse.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page: int):
        """Sets the page of this FulfillmentMissionsQueryResponse.


        :param page: The page of this FulfillmentMissionsQueryResponse.
        :type page: int
        """

        self._page = page

    @property
    def count(self) -> int:
        """Gets the count of this FulfillmentMissionsQueryResponse.


        :return: The count of this FulfillmentMissionsQueryResponse.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this FulfillmentMissionsQueryResponse.


        :param count: The count of this FulfillmentMissionsQueryResponse.
        :type count: int
        """

        self._count = count

    @property
    def records(self) -> List[FulfillmentMission]:
        """Gets the records of this FulfillmentMissionsQueryResponse.


        :return: The records of this FulfillmentMissionsQueryResponse.
        :rtype: List[FulfillmentMission]
        """
        return self._records

    @records.setter
    def records(self, records: List[FulfillmentMission]):
        """Sets the records of this FulfillmentMissionsQueryResponse.


        :param records: The records of this FulfillmentMissionsQueryResponse.
        :type records: List[FulfillmentMission]
        """

        self._records = records
