# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.task import Task  # noqa: F401,E501
from swagger_server.models.all_of_task_update_event_event_type import AllOfTaskUpdateEventEventType  # noqa: F401,E501
from swagger_server import util


class TaskUpdateEvent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, event_type: AllOfTaskUpdateEventEventType=None, created: str=None, task: Task=None):  # noqa: E501
        """TaskUpdateEvent - a model defined in Swagger

        :param event_type: The event_type of this TaskUpdateEvent.  # noqa: E501
        :type event_type: AllOfTaskUpdateEventEventType
        :param created: The created of this TaskUpdateEvent.  # noqa: E501
        :type created: str
        :param task: The task of this TaskUpdateEvent.  # noqa: E501
        :type task: Task
        """
        self.swagger_types = {
            'event_type': AllOfTaskUpdateEventEventType,
            'created': str,
            'task': Task
        }

        self.attribute_map = {
            'event_type': 'eventType',
            'created': 'created',
            'task': 'task'
        }
        self._event_type = event_type
        self._created = created
        self._task = task

    @classmethod
    def from_dict(cls, dikt) -> 'TaskUpdateEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaskUpdateEvent of this TaskUpdateEvent.  # noqa: E501
        :rtype: TaskUpdateEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type(self) -> AllOfTaskUpdateEventEventType:
        """Gets the event_type of this TaskUpdateEvent.

        The type of this event  # noqa: E501

        :return: The event_type of this TaskUpdateEvent.
        :rtype: AllOfTaskUpdateEventEventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: AllOfTaskUpdateEventEventType):
        """Sets the event_type of this TaskUpdateEvent.

        The type of this event  # noqa: E501

        :param event_type: The event_type of this TaskUpdateEvent.
        :type event_type: AllOfTaskUpdateEventEventType
        """

        self._event_type = event_type

    @property
    def created(self) -> str:
        """Gets the created of this TaskUpdateEvent.

        When this event was created. If the event originated in the AMR subsystem, the event creation time published by the AMR subsystem will be set, else the event creation time in VTS will be set  # noqa: E501

        :return: The created of this TaskUpdateEvent.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created: str):
        """Sets the created of this TaskUpdateEvent.

        When this event was created. If the event originated in the AMR subsystem, the event creation time published by the AMR subsystem will be set, else the event creation time in VTS will be set  # noqa: E501

        :param created: The created of this TaskUpdateEvent.
        :type created: str
        """

        self._created = created

    @property
    def task(self) -> Task:
        """Gets the task of this TaskUpdateEvent.


        :return: The task of this TaskUpdateEvent.
        :rtype: Task
        """
        return self._task

    @task.setter
    def task(self, task: Task):
        """Sets the task of this TaskUpdateEvent.


        :param task: The task of this TaskUpdateEvent.
        :type task: Task
        """

        self._task = task
