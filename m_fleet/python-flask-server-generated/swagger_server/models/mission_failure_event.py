# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.fulfillment_mission import FulfillmentMission  # noqa: F401,E501
from swagger_server.models.all_of_mission_failure_event_event_type import AllOfMissionFailureEventEventType  # noqa: F401,E501
from swagger_server import util


class MissionFailureEvent(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, event_type: AllOfMissionFailureEventEventType=None, created: str=None, fulfillment_mission: FulfillmentMission=None, message: str=None):  # noqa: E501
        """MissionFailureEvent - a model defined in Swagger

        :param event_type: The event_type of this MissionFailureEvent.  # noqa: E501
        :type event_type: AllOfMissionFailureEventEventType
        :param created: The created of this MissionFailureEvent.  # noqa: E501
        :type created: str
        :param fulfillment_mission: The fulfillment_mission of this MissionFailureEvent.  # noqa: E501
        :type fulfillment_mission: FulfillmentMission
        :param message: The message of this MissionFailureEvent.  # noqa: E501
        :type message: str
        """
        self.swagger_types = {
            'event_type': AllOfMissionFailureEventEventType,
            'created': str,
            'fulfillment_mission': FulfillmentMission,
            'message': str
        }

        self.attribute_map = {
            'event_type': 'eventType',
            'created': 'created',
            'fulfillment_mission': 'fulfillmentMission',
            'message': 'message'
        }
        self._event_type = event_type
        self._created = created
        self._fulfillment_mission = fulfillment_mission
        self._message = message

    @classmethod
    def from_dict(cls, dikt) -> 'MissionFailureEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MissionFailureEvent of this MissionFailureEvent.  # noqa: E501
        :rtype: MissionFailureEvent
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event_type(self) -> AllOfMissionFailureEventEventType:
        """Gets the event_type of this MissionFailureEvent.

        The type of this event  # noqa: E501

        :return: The event_type of this MissionFailureEvent.
        :rtype: AllOfMissionFailureEventEventType
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type: AllOfMissionFailureEventEventType):
        """Sets the event_type of this MissionFailureEvent.

        The type of this event  # noqa: E501

        :param event_type: The event_type of this MissionFailureEvent.
        :type event_type: AllOfMissionFailureEventEventType
        """

        self._event_type = event_type

    @property
    def created(self) -> str:
        """Gets the created of this MissionFailureEvent.

        When this event was created. If the event originated in the AMR subsystem, the event creation time published by the AMR subsystem will be set, else the event creation time in VTS will be set  # noqa: E501

        :return: The created of this MissionFailureEvent.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created: str):
        """Sets the created of this MissionFailureEvent.

        When this event was created. If the event originated in the AMR subsystem, the event creation time published by the AMR subsystem will be set, else the event creation time in VTS will be set  # noqa: E501

        :param created: The created of this MissionFailureEvent.
        :type created: str
        """

        self._created = created

    @property
    def fulfillment_mission(self) -> FulfillmentMission:
        """Gets the fulfillment_mission of this MissionFailureEvent.


        :return: The fulfillment_mission of this MissionFailureEvent.
        :rtype: FulfillmentMission
        """
        return self._fulfillment_mission

    @fulfillment_mission.setter
    def fulfillment_mission(self, fulfillment_mission: FulfillmentMission):
        """Sets the fulfillment_mission of this MissionFailureEvent.


        :param fulfillment_mission: The fulfillment_mission of this MissionFailureEvent.
        :type fulfillment_mission: FulfillmentMission
        """

        self._fulfillment_mission = fulfillment_mission

    @property
    def message(self) -> str:
        """Gets the message of this MissionFailureEvent.


        :return: The message of this MissionFailureEvent.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this MissionFailureEvent.


        :param message: The message of this MissionFailureEvent.
        :type message: str
        """

        self._message = message
