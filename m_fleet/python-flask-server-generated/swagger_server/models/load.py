# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.meta_data import MetaData  # noqa: F401,E501
from swagger_server.models.all_of_load_type import AllOfLoadType  # noqa: F401,E501
from swagger_server.models.all_of_load_dimensions import AllOfLoadDimensions  # noqa: F401,E501
from swagger_server.models.all_of_load_status import AllOfLoadStatus  # noqa: F401,E501
from swagger_server import util


class Load(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, load_host_id: str=None, load_type_id: str=None, location_id: str=None, count: int=None, type: AllOfLoadType=None, dimensions: AllOfLoadDimensions=None, custom_meta_data: List[MetaData]=None, load_id: str=None, status: AllOfLoadStatus=None):  # noqa: E501
        """Load - a model defined in Swagger

        :param load_host_id: The load_host_id of this Load.  # noqa: E501
        :type load_host_id: str
        :param load_type_id: The load_type_id of this Load.  # noqa: E501
        :type load_type_id: str
        :param location_id: The location_id of this Load.  # noqa: E501
        :type location_id: str
        :param count: The count of this Load.  # noqa: E501
        :type count: int
        :param type: The type of this Load.  # noqa: E501
        :type type: AllOfLoadType
        :param dimensions: The dimensions of this Load.  # noqa: E501
        :type dimensions: AllOfLoadDimensions
        :param custom_meta_data: The custom_meta_data of this Load.  # noqa: E501
        :type custom_meta_data: List[MetaData]
        :param load_id: The load_id of this Load.  # noqa: E501
        :type load_id: str
        :param status: The status of this Load.  # noqa: E501
        :type status: AllOfLoadStatus
        """
        self.swagger_types = {
            'load_host_id': str,
            'load_type_id': str,
            'location_id': str,
            'count': int,
            'type': AllOfLoadType,
            'dimensions': AllOfLoadDimensions,
            'custom_meta_data': List[MetaData],
            'load_id': str,
            'status': AllOfLoadStatus
        }

        self.attribute_map = {
            'load_host_id': 'loadHostId',
            'load_type_id': 'loadTypeId',
            'location_id': 'locationId',
            'count': 'count',
            'type': 'type',
            'dimensions': 'dimensions',
            'custom_meta_data': 'customMetaData',
            'load_id': 'loadId',
            'status': 'status'
        }
        self._load_host_id = load_host_id
        self._load_type_id = load_type_id
        self._location_id = location_id
        self._count = count
        self._type = type
        self._dimensions = dimensions
        self._custom_meta_data = custom_meta_data
        self._load_id = load_id
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Load':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Load of this Load.  # noqa: E501
        :rtype: Load
        """
        return util.deserialize_model(dikt, cls)

    @property
    def load_host_id(self) -> str:
        """Gets the load_host_id of this Load.

        Client identifier for this load. Mandatory for Pick and Drop task types.  # noqa: E501

        :return: The load_host_id of this Load.
        :rtype: str
        """
        return self._load_host_id

    @load_host_id.setter
    def load_host_id(self, load_host_id: str):
        """Sets the load_host_id of this Load.

        Client identifier for this load. Mandatory for Pick and Drop task types.  # noqa: E501

        :param load_host_id: The load_host_id of this Load.
        :type load_host_id: str
        """

        self._load_host_id = load_host_id

    @property
    def load_type_id(self) -> str:
        """Gets the load_type_id of this Load.

        The ID of the type of load  # noqa: E501

        :return: The load_type_id of this Load.
        :rtype: str
        """
        return self._load_type_id

    @load_type_id.setter
    def load_type_id(self, load_type_id: str):
        """Sets the load_type_id of this Load.

        The ID of the type of load  # noqa: E501

        :param load_type_id: The load_type_id of this Load.
        :type load_type_id: str
        """

        self._load_type_id = load_type_id

    @property
    def location_id(self) -> str:
        """Gets the location_id of this Load.

        The ID of the location of the load  # noqa: E501

        :return: The location_id of this Load.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id: str):
        """Sets the location_id of this Load.

        The ID of the location of the load  # noqa: E501

        :param location_id: The location_id of this Load.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def count(self) -> int:
        """Gets the count of this Load.

        The count of object within the load  # noqa: E501

        :return: The count of this Load.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this Load.

        The count of object within the load  # noqa: E501

        :param count: The count of this Load.
        :type count: int
        """

        self._count = count

    @property
    def type(self) -> AllOfLoadType:
        """Gets the type of this Load.

        The type of load  # noqa: E501

        :return: The type of this Load.
        :rtype: AllOfLoadType
        """
        return self._type

    @type.setter
    def type(self, type: AllOfLoadType):
        """Sets the type of this Load.

        The type of load  # noqa: E501

        :param type: The type of this Load.
        :type type: AllOfLoadType
        """

        self._type = type

    @property
    def dimensions(self) -> AllOfLoadDimensions:
        """Gets the dimensions of this Load.

        The dimensions of the load  # noqa: E501

        :return: The dimensions of this Load.
        :rtype: AllOfLoadDimensions
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions: AllOfLoadDimensions):
        """Sets the dimensions of this Load.

        The dimensions of the load  # noqa: E501

        :param dimensions: The dimensions of this Load.
        :type dimensions: AllOfLoadDimensions
        """

        self._dimensions = dimensions

    @property
    def custom_meta_data(self) -> List[MetaData]:
        """Gets the custom_meta_data of this Load.

        A collection of custom meta data to store with the load  # noqa: E501

        :return: The custom_meta_data of this Load.
        :rtype: List[MetaData]
        """
        return self._custom_meta_data

    @custom_meta_data.setter
    def custom_meta_data(self, custom_meta_data: List[MetaData]):
        """Sets the custom_meta_data of this Load.

        A collection of custom meta data to store with the load  # noqa: E501

        :param custom_meta_data: The custom_meta_data of this Load.
        :type custom_meta_data: List[MetaData]
        """

        self._custom_meta_data = custom_meta_data

    @property
    def load_id(self) -> str:
        """Gets the load_id of this Load.

        The VTS ID of the load  # noqa: E501

        :return: The load_id of this Load.
        :rtype: str
        """
        return self._load_id

    @load_id.setter
    def load_id(self, load_id: str):
        """Sets the load_id of this Load.

        The VTS ID of the load  # noqa: E501

        :param load_id: The load_id of this Load.
        :type load_id: str
        """

        self._load_id = load_id

    @property
    def status(self) -> AllOfLoadStatus:
        """Gets the status of this Load.

        The status of the load  # noqa: E501

        :return: The status of this Load.
        :rtype: AllOfLoadStatus
        """
        return self._status

    @status.setter
    def status(self, status: AllOfLoadStatus):
        """Sets the status of this Load.

        The status of the load  # noqa: E501

        :param status: The status of this Load.
        :type status: AllOfLoadStatus
        """

        self._status = status
