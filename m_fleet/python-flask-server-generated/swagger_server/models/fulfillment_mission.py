# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.error_detail import ErrorDetail  # noqa: F401,E501
from swagger_server.models.task import Task  # noqa: F401,E501
from swagger_server.models.all_of_fulfillment_mission_type import AllOfFulfillmentMissionType  # noqa: F401,E501
from swagger_server.models.all_of_fulfillment_mission_status import AllOfFulfillmentMissionStatus  # noqa: F401,E501
from swagger_server import util


class FulfillmentMission(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, type: AllOfFulfillmentMissionType=None, tasks: List[Task]=None, mission_host_id: str=None, priority: int=None, expected_load_type_ids: List[str]=None, mission_id: str=None, status: AllOfFulfillmentMissionStatus=None, state_message: str=None, errors: List[ErrorDetail]=None, start_time: str=None, end_time: str=None):  # noqa: E501
        """FulfillmentMission - a model defined in Swagger

        :param type: The type of this FulfillmentMission.  # noqa: E501
        :type type: AllOfFulfillmentMissionType
        :param tasks: The tasks of this FulfillmentMission.  # noqa: E501
        :type tasks: List[Task]
        :param mission_host_id: The mission_host_id of this FulfillmentMission.  # noqa: E501
        :type mission_host_id: str
        :param priority: The priority of this FulfillmentMission.  # noqa: E501
        :type priority: int
        :param expected_load_type_ids: The expected_load_type_ids of this FulfillmentMission.  # noqa: E501
        :type expected_load_type_ids: List[str]
        :param mission_id: The mission_id of this FulfillmentMission.  # noqa: E501
        :type mission_id: str
        :param status: The status of this FulfillmentMission.  # noqa: E501
        :type status: AllOfFulfillmentMissionStatus
        :param state_message: The state_message of this FulfillmentMission.  # noqa: E501
        :type state_message: str
        :param errors: The errors of this FulfillmentMission.  # noqa: E501
        :type errors: List[ErrorDetail]
        :param start_time: The start_time of this FulfillmentMission.  # noqa: E501
        :type start_time: str
        :param end_time: The end_time of this FulfillmentMission.  # noqa: E501
        :type end_time: str
        """
        self.swagger_types = {
            'type': AllOfFulfillmentMissionType,
            'tasks': List[Task],
            'mission_host_id': str,
            'priority': int,
            'expected_load_type_ids': List[str],
            'mission_id': str,
            'status': AllOfFulfillmentMissionStatus,
            'state_message': str,
            'errors': List[ErrorDetail],
            'start_time': str,
            'end_time': str
        }

        self.attribute_map = {
            'type': 'type',
            'tasks': 'tasks',
            'mission_host_id': 'missionHostId',
            'priority': 'priority',
            'expected_load_type_ids': 'expectedLoadTypeIds',
            'mission_id': 'missionId',
            'status': 'status',
            'state_message': 'stateMessage',
            'errors': 'errors',
            'start_time': 'startTime',
            'end_time': 'endTime'
        }
        self._type = type
        self._tasks = tasks
        self._mission_host_id = mission_host_id
        self._priority = priority
        self._expected_load_type_ids = expected_load_type_ids
        self._mission_id = mission_id
        self._status = status
        self._state_message = state_message
        self._errors = errors
        self._start_time = start_time
        self._end_time = end_time

    @classmethod
    def from_dict(cls, dikt) -> 'FulfillmentMission':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FulfillmentMission of this FulfillmentMission.  # noqa: E501
        :rtype: FulfillmentMission
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> AllOfFulfillmentMissionType:
        """Gets the type of this FulfillmentMission.

        The type of mission being executed  # noqa: E501

        :return: The type of this FulfillmentMission.
        :rtype: AllOfFulfillmentMissionType
        """
        return self._type

    @type.setter
    def type(self, type: AllOfFulfillmentMissionType):
        """Sets the type of this FulfillmentMission.

        The type of mission being executed  # noqa: E501

        :param type: The type of this FulfillmentMission.
        :type type: AllOfFulfillmentMissionType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def tasks(self) -> List[Task]:
        """Gets the tasks of this FulfillmentMission.

        The collection of tasks for this mission to complete; there must be at least one task to define a mission  # noqa: E501

        :return: The tasks of this FulfillmentMission.
        :rtype: List[Task]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks: List[Task]):
        """Sets the tasks of this FulfillmentMission.

        The collection of tasks for this mission to complete; there must be at least one task to define a mission  # noqa: E501

        :param tasks: The tasks of this FulfillmentMission.
        :type tasks: List[Task]
        """
        if tasks is None:
            raise ValueError("Invalid value for `tasks`, must not be `None`")  # noqa: E501

        self._tasks = tasks

    @property
    def mission_host_id(self) -> str:
        """Gets the mission_host_id of this FulfillmentMission.

        The client-side ID is associated with this mission. This can be used to reference the mission when sending requests on the mission. If this is not set, it will be set to the id on mission creation. This makes it easier for the client to manage the mission from their own software.  # noqa: E501

        :return: The mission_host_id of this FulfillmentMission.
        :rtype: str
        """
        return self._mission_host_id

    @mission_host_id.setter
    def mission_host_id(self, mission_host_id: str):
        """Sets the mission_host_id of this FulfillmentMission.

        The client-side ID is associated with this mission. This can be used to reference the mission when sending requests on the mission. If this is not set, it will be set to the id on mission creation. This makes it easier for the client to manage the mission from their own software.  # noqa: E501

        :param mission_host_id: The mission_host_id of this FulfillmentMission.
        :type mission_host_id: str
        """

        self._mission_host_id = mission_host_id

    @property
    def priority(self) -> int:
        """Gets the priority of this FulfillmentMission.

        Defines the priority for the mission, if the AMR subsystem supports priorities mission will be sent to the AMR subsystem. Value should be in range 0-2147483647 where 0 is the highest priority and 2147483647 is the lowest priority. This range is also configurable in the application.  # noqa: E501

        :return: The priority of this FulfillmentMission.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority: int):
        """Sets the priority of this FulfillmentMission.

        Defines the priority for the mission, if the AMR subsystem supports priorities mission will be sent to the AMR subsystem. Value should be in range 0-2147483647 where 0 is the highest priority and 2147483647 is the lowest priority. This range is also configurable in the application.  # noqa: E501

        :param priority: The priority of this FulfillmentMission.
        :type priority: int
        """

        self._priority = priority

    @property
    def expected_load_type_ids(self) -> List[str]:
        """Gets the expected_load_type_ids of this FulfillmentMission.

        The expected load type Ids used in the mission; Not Used  # noqa: E501

        :return: The expected_load_type_ids of this FulfillmentMission.
        :rtype: List[str]
        """
        return self._expected_load_type_ids

    @expected_load_type_ids.setter
    def expected_load_type_ids(self, expected_load_type_ids: List[str]):
        """Sets the expected_load_type_ids of this FulfillmentMission.

        The expected load type Ids used in the mission; Not Used  # noqa: E501

        :param expected_load_type_ids: The expected_load_type_ids of this FulfillmentMission.
        :type expected_load_type_ids: List[str]
        """

        self._expected_load_type_ids = expected_load_type_ids

    @property
    def mission_id(self) -> str:
        """Gets the mission_id of this FulfillmentMission.

        The ID for the fulfillment mission set by VTS  # noqa: E501

        :return: The mission_id of this FulfillmentMission.
        :rtype: str
        """
        return self._mission_id

    @mission_id.setter
    def mission_id(self, mission_id: str):
        """Sets the mission_id of this FulfillmentMission.

        The ID for the fulfillment mission set by VTS  # noqa: E501

        :param mission_id: The mission_id of this FulfillmentMission.
        :type mission_id: str
        """

        self._mission_id = mission_id

    @property
    def status(self) -> AllOfFulfillmentMissionStatus:
        """Gets the status of this FulfillmentMission.

        The current state or status of the mission  # noqa: E501

        :return: The status of this FulfillmentMission.
        :rtype: AllOfFulfillmentMissionStatus
        """
        return self._status

    @status.setter
    def status(self, status: AllOfFulfillmentMissionStatus):
        """Sets the status of this FulfillmentMission.

        The current state or status of the mission  # noqa: E501

        :param status: The status of this FulfillmentMission.
        :type status: AllOfFulfillmentMissionStatus
        """

        self._status = status

    @property
    def state_message(self) -> str:
        """Gets the state_message of this FulfillmentMission.

        Information describing the current state of the mission  # noqa: E501

        :return: The state_message of this FulfillmentMission.
        :rtype: str
        """
        return self._state_message

    @state_message.setter
    def state_message(self, state_message: str):
        """Sets the state_message of this FulfillmentMission.

        Information describing the current state of the mission  # noqa: E501

        :param state_message: The state_message of this FulfillmentMission.
        :type state_message: str
        """

        self._state_message = state_message

    @property
    def errors(self) -> List[ErrorDetail]:
        """Gets the errors of this FulfillmentMission.

        Stores any errors reported against the mission  # noqa: E501

        :return: The errors of this FulfillmentMission.
        :rtype: List[ErrorDetail]
        """
        return self._errors

    @errors.setter
    def errors(self, errors: List[ErrorDetail]):
        """Sets the errors of this FulfillmentMission.

        Stores any errors reported against the mission  # noqa: E501

        :param errors: The errors of this FulfillmentMission.
        :type errors: List[ErrorDetail]
        """

        self._errors = errors

    @property
    def start_time(self) -> str:
        """Gets the start_time of this FulfillmentMission.

        Stores the time for mission started - requested from the client  # noqa: E501

        :return: The start_time of this FulfillmentMission.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: str):
        """Sets the start_time of this FulfillmentMission.

        Stores the time for mission started - requested from the client  # noqa: E501

        :param start_time: The start_time of this FulfillmentMission.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def end_time(self) -> str:
        """Gets the end_time of this FulfillmentMission.

        Stores the time for mission ended  # noqa: E501

        :return: The end_time of this FulfillmentMission.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time: str):
        """Sets the end_time of this FulfillmentMission.

        Stores the time for mission ended  # noqa: E501

        :param end_time: The end_time of this FulfillmentMission.
        :type end_time: str
        """

        self._end_time = end_time
